{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reduser.js","redux/store.js","components/ContactsList/ContactsList.js","components/ContactsForm/ContactsForm.js","components/Filter/Filter.js","App.js","index.js"],"names":["addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","items","createReducer","actions","state","filter","_","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contacts","contactsReducer","devTools","process","getVisibleContacts","normalizedFilter","toLowerCase","contact","includes","connect","dispatch","onDeleteContact","contactsActions","className","map","onClick","ContactsForm","contactUniqueId","setState","prevState","handleInputChange","event","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","this","type","pattern","title","onChange","required","Component","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.439a0483.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contacts/add', ({ name, number }) => {\r\n  return {\r\n    payload: {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    },\r\n  };\r\n});\r\nconst deleteContact = createAction('contacts/delete');\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({ items, filter });\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport contactsReducer from './contacts/contacts-reduser';\r\n\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nimport './ContactsList.css';\r\n\r\nconst ContactsList = ({ contacts, onDeleteContact }) => (\r\n  <ul className=\"contacts__list\">\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li className=\"contacts__list-item\" key={id}>\r\n        <p className=\"contacts__list-name\">{name}</p>\r\n        <p className=\"contacts__list-number\">{number}</p>\r\n\r\n        <button\r\n          className=\"contacts__list-button\"\r\n          onClick={() => onDeleteContact(id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst getVisibleContacts = (items, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return items.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: getVisibleContacts(items, filter),\r\n});\r\n\r\nconst mapDaspatchToProps = dispatch => ({\r\n  onDeleteContact: id => dispatch(contactsActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDaspatchToProps)(ContactsList);\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nimport shortid from 'shortid';\r\n\r\nimport './ContactsForm.css';\r\n\r\nclass ContactsForm extends Component {\r\n  state = {\r\n    contacts: [],\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  contactUniqueId = shortid.generate();\r\n\r\n  addContact = (name, number) => {\r\n    const contact = {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    };\r\n\r\n    this.setState(prevState => ({\r\n      contacts: [contact, ...prevState.contacts],\r\n    }));\r\n  };\r\n\r\n  handleInputChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n      id: shortid.generate(),\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    this.props.onSubmit(this.state);\r\n\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"\" onSubmit={this.handleSubmit}>\r\n        <label className=\"contacts__form-item\" id={this.contactUniqueId}>\r\n          Name\r\n          <input\r\n            className=\"contacts__form-text\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"title\"\r\n            onChange={this.handleInputChange}\r\n            value={this.state.name}\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label className=\"contacts__form-item\" id={this.contactUniqueId}>\r\n          Number\r\n          <input\r\n            className=\"contacts__form-text\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"title\"\r\n            onChange={this.handleInputChange}\r\n            value={this.state.number}\r\n            required\r\n          />\r\n        </label>\r\n        <button className=\"contacts__form-button\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDaspatchToProps = dispatch => ({\r\n  onSubmit: contact => dispatch(contactsActions.addContact(contact)),\r\n});\r\n\r\nexport default connect(null, mapDaspatchToProps)(ContactsForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contacts-actions';\r\n\r\nimport './Filter.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className=\"filter\">\r\n    Find contacts by name\r\n    <input type=\"text\" value={value} onChange={onChange}></input>\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDaspatchToProps = dispatch => ({\r\n  onChange: event => dispatch(contactsActions.changeFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDaspatchToProps)(Filter);\r\n","import { Component } from 'react';\r\n\r\nimport ContactsList from './components/ContactsList';\r\nimport ContactsForm from './components/ContactsForm';\r\nimport Filter from './components/Filter';\r\n\r\n// import InitialContacts from './components/ContactsList/contacts.json';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  // state = {\r\n  //   contacts: InitialContacts,\r\n  //   filter: '',\r\n  // };\r\n\r\n  // componentDidMount() {\r\n  //   const contacts = localStorage.getItem('contacts');\r\n  //   const parsedContacts = JSON.parse(contacts);\r\n\r\n  //   if (parsedContacts) {\r\n  //     this.setState({ contacts: parsedContacts });\r\n  //   }\r\n  // }\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   if (this.state.contacts !== prevState.contacts) {\r\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n  //   }\r\n  // }\r\n\r\n  // addContact = contact => {\r\n  //   const { contacts } = this.state;\r\n  //   const uniqueNames = contacts.map(contact => contact.name);\r\n\r\n  //   uniqueNames.includes(contact.name)\r\n  //     ? alert(`${contact.name} is already in contacts.`)\r\n  //     : this.setState(prevState => ({\r\n  //         contacts: [contact, ...prevState.contacts],\r\n  //       }));\r\n  // };\r\n\r\n  // deleteContact = contactId => {\r\n  //   this.setState(prevState => ({\r\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\r\n  //   }));\r\n  // };\r\n\r\n  // changeFilter = event => {\r\n  //   this.setState({ filter: event.currentTarget.value });\r\n  // };\r\n\r\n  // getVisibleContacts = () => {\r\n  //   const { contacts, filter } = this.state;\r\n\r\n  //   const normalizedFilter = filter.toLowerCase();\r\n\r\n  //   return contacts.filter(contact =>\r\n  //     contact.name.toLowerCase().includes(normalizedFilter),\r\n  //   );\r\n  // };\r\n\r\n  render() {\r\n    // const { filter } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <ContactsForm />\r\n\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n\r\n        <ContactsList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nimport App from './App';\r\n\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}