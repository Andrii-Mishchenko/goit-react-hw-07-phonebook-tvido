{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Feedback/Feedback.js","App.js","index.js"],"names":["FeedbackOptions","onClickGood","onClickNeutral","onClickBad","className","type","onClick","Statistic","good","neutral","bad","total","percent","Feedback","state","props","initialGood","initialNeutral","initialBad","initialTotal","positivePercentage","initialPositivePercentage","setState","prevState","countTotalFeedback","countPositivePercentage","Math","floor","this","Statistics","Component","defaultProps","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAiBeA,EAfS,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,eAAgBC,EAAhC,EAAgCA,WAAhC,OACtB,sBAAKC,UAAU,GAAf,UACE,oBAAIA,UAAU,GAAd,mCACA,wBAAQC,KAAK,SAASC,QAASL,EAAaG,UAAU,GAAtD,kBAGA,wBAAQC,KAAK,SAASC,QAASJ,EAAgBE,UAAU,GAAzD,qBAGA,wBAAQC,KAAK,SAASC,QAASH,EAAYC,UAAU,GAArD,qBCCWG,EAVG,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,QAA9B,OAChB,+BACE,qBAAIR,UAAU,GAAd,mBAAwBI,KACxB,qBAAIJ,UAAU,GAAd,sBAA2BK,KAC3B,qBAAIL,UAAU,GAAd,kBAAuBM,KACvB,qBAAIN,UAAU,GAAd,oBAAyBO,KACzB,qBAAIP,UAAU,GAAd,kCAAuCQ,EAAvC,WCHEC,E,4MAiBJC,MAAQ,CACNN,KAAM,EAAKO,MAAMC,YACjBP,QAAS,EAAKM,MAAME,eACpBP,IAAK,EAAKK,MAAMG,WAChBP,MAAO,EAAKI,MAAMI,aAClBC,mBAAoB,EAAKL,MAAMM,2B,EAGjCpB,YAAc,WACZ,EAAKqB,UAAS,SAAAC,GAAS,MAAK,CAC1Bf,KAAMe,EAAUf,KAAO,O,EAI3BN,eAAiB,WACf,EAAKoB,UAAS,SAAAC,GAAS,MAAK,CAC1Bd,QAASc,EAAUd,QAAU,O,EAIjCN,WAAa,WACX,EAAKmB,UAAS,SAAAC,GAAS,MAAK,CAC1Bb,IAAKa,EAAUb,IAAM,O,EAIzBc,mBAAqB,kBACnB,EAAKV,MAAMN,KAAO,EAAKM,MAAMJ,IAAM,EAAKI,MAAML,S,EAEhDgB,wBAA0B,WAExB,OADc,EAAKD,qBAEfE,KAAKC,MAAO,EAAKb,MAAMN,KAAO,EAAKgB,qBAAwB,KAC3D,G,4CAGN,WACE,MAA+BI,KAAKd,MAA5BN,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBC,EAAQiB,KAAKJ,qBACbZ,EAAUgB,KAAKH,0BAErB,OACE,qCACE,cAAC,EAAD,CACExB,YAAa2B,KAAK3B,YAClBC,eAAgB0B,KAAK1B,eACrBC,WAAYyB,KAAKzB,aAGnB,sBAAKC,UAAU,GAAf,UACE,oBAAIA,UAAU,GAAd,wBACA,cAACyB,EAAD,CACErB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,QAASA,c,GAzEEkB,aAAjBjB,EACGkB,aAAe,CACpBf,YAAa,EACbC,eAAgB,EAChBC,WAAY,EACZC,aAAc,EACdE,0BAA2B,GA2EhBR,QCzEAmB,G,MARH,WACV,OACE,mCACE,cAAC,EAAD,Q,MCHNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ad3fbab7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FeedbackOptions = ({ onClickGood, onClickNeutral, onClickBad }) => (\r\n  <div className=\"\">\r\n    <h1 className=\"\">Please leave feedback</h1>\r\n    <button type=\"button\" onClick={onClickGood} className=\"\">\r\n      Good\r\n    </button>\r\n    <button type=\"button\" onClick={onClickNeutral} className=\"\">\r\n      Neutral\r\n    </button>\r\n    <button type=\"button\" onClick={onClickBad} className=\"\">\r\n      Bad\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\n\r\nconst Statistic = ({ good, neutral, bad, total, percent }) => (\r\n  <ul>\r\n    <li className=\"\">Good: {good}</li>\r\n    <li className=\"\">Neutral: {neutral}</li>\r\n    <li className=\"\">Bad: {bad}</li>\r\n    <li className=\"\">Total: {total}</li>\r\n    <li className=\"\">Positive percentage: {percent}%</li>\r\n  </ul>\r\n);\r\n\r\nexport default Statistic;\r\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport FeedbackOptions from '../FeedbackOptions/FeedbackOptions';\r\nimport Statistics from '../Statistics/Statistics';\r\n\r\nclass Feedback extends Component {\r\n  static defaultProps = {\r\n    initialGood: 0,\r\n    initialNeutral: 0,\r\n    initialBad: 0,\r\n    initialTotal: 0,\r\n    initialPositivePercentage: 0,\r\n  };\r\n\r\n  static propTypes = {\r\n    good: PropTypes.number,\r\n    neutral: PropTypes.number,\r\n    bad: PropTypes.number,\r\n    total: PropTypes.number,\r\n    percent: PropTypes.number,\r\n  };\r\n\r\n  state = {\r\n    good: this.props.initialGood,\r\n    neutral: this.props.initialNeutral,\r\n    bad: this.props.initialBad,\r\n    total: this.props.initialTotal,\r\n    positivePercentage: this.props.initialPositivePercentage,\r\n  };\r\n\r\n  onClickGood = () => {\r\n    this.setState(prevState => ({\r\n      good: prevState.good + 1,\r\n    }));\r\n  };\r\n\r\n  onClickNeutral = () => {\r\n    this.setState(prevState => ({\r\n      neutral: prevState.neutral + 1,\r\n    }));\r\n  };\r\n\r\n  onClickBad = () => {\r\n    this.setState(prevState => ({\r\n      bad: prevState.bad + 1,\r\n    }));\r\n  };\r\n\r\n  countTotalFeedback = () =>\r\n    this.state.good + this.state.bad + this.state.neutral;\r\n\r\n  countPositivePercentage = () => {\r\n    const total = this.countTotalFeedback();\r\n    return total\r\n      ? Math.floor((this.state.good / this.countTotalFeedback()) * 100)\r\n      : 0;\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = this.countTotalFeedback();\r\n    const percent = this.countPositivePercentage();\r\n\r\n    return (\r\n      <>\r\n        <FeedbackOptions\r\n          onClickGood={this.onClickGood}\r\n          onClickNeutral={this.onClickNeutral}\r\n          onClickBad={this.onClickBad}\r\n        />\r\n\r\n        <div className=\"\">\r\n          <h1 className=\"\">Statistics</h1>\r\n          <Statistics\r\n            good={good}\r\n            neutral={neutral}\r\n            bad={bad}\r\n            total={total}\r\n            percent={percent}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feedback;\r\n","import React from 'react';\nimport Feedback from './components/Feedback';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <>\n      <Feedback />\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}